name: MoonInsurance CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Install Dependencies
      - name: Install Dependencies
        run: |
          echo "Installing necessary dependencies..."
          sudo apt-get update
          sudo apt-get install -y apt-transport-https curl conntrack socat
          echo "Dependencies installed."

      # Step 3: Install Minikube
      - name: Install Minikube
        run: |
          echo "Installing Minikube..."
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          echo "Minikube installed."

      # Step 4: Start Minikube
      - name: Start Minikube
        run: |
          echo "Starting Minikube with Docker driver..."
          minikube start --driver=docker
          minikube addons enable ingress
          echo "Minikube started and ingress enabled."

      # Step 5: Build Docker Images inside Minikube
      - name: Build Docker Images
        run: |
          eval $(minikube docker-env)
          declare -A services=(
            ["AgentService"]="agent-service"
            ["IntegrationService"]="integration-service"
            ["NotificationService"]="notification-service"
            ["AggregatorService"]="aggregator-service"
            ["RedshiftAnalyticsService"]="redshift-analytics-service"
          )
          for service in "${!services[@]}"; do
            echo "Building Docker image for $service..."
            docker build -t "${services[$service]}:latest" -f "$service/docker/Dockerfile" "$service"
          done
          echo "Docker images built successfully."

      # Step 6: Deploy Kubernetes Resources
      - name: Deploy Kubernetes Resources
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          REDSHIFT_HOST: ${{ secrets.REDSHIFT_HOST }}
          REDSHIFT_PORT: ${{ secrets.REDSHIFT_PORT }}
          REDSHIFT_USER: ${{ secrets.REDSHIFT_USER }}
          REDSHIFT_PASSWORD: ${{ secrets.REDSHIFT_PASSWORD }}
          REDSHIFT_DBNAME: ${{ secrets.REDSHIFT_DBNAME }}
        run: |
          echo "Applying Kubernetes manifests..."

          declare -A services=(
            ["AgentService"]="agent-service"
            ["IntegrationService"]="integration-service"
            ["NotificationService"]="notification-service"
            ["AggregatorService"]="aggregator-service"
            ["RedshiftAnalyticsService"]="redshift-analytics-service"
          )

          for service in "${!services[@]}"; do
            echo "Applying manifests for $service..."
            kubectl apply -f "./$service/manifests/"
          done

          echo "Applying ingress..."
          kubectl apply -f ./ingress.yaml

          echo "Deployment completed."

      # Step 7: Trigger Redshift CronJob
      - name: Trigger Redshift CronJob
        run: |
          echo "Triggering Redshift CronJob manually..."
          kubectl create job --from=cronjob/redshift-analytics-cronjob redshift-analytics-manual || echo "CronJob not found, skipping."
          kubectl get jobs

      # Step 8: Wait for Pods to Be Ready
      - name: Wait for Pods to be Ready
        run: |
          echo "Waiting for pods to be ready..."
          sleep 180
          kubectl get pods
          kubectl wait --for=condition=ready pod --all --timeout=300s
          echo "All pods are ready."

      # Step 9: Verify Job Status
      - name: Verify Jobs
        run: |
          echo "Checking jobs status..."
          kubectl get jobs
          echo "Jobs status verified."

      # Step 10: Run Tests
      - name: Run Tests
        run: |
          echo "Running tests..."
          python test.py || echo "test.py not found, skipping."
          echo "Tests executed successfully."

      # Step 11: Commit Changes
      - name: Commit Changes to Git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Committing changes to Git..."
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git add .
          git commit -m "Automated CI/CD pipeline updates."
          git push "https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git"
          echo "Changes committed to Git."
