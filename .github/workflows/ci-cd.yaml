name: Build and Deploy to GKE

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GKE_CLUSTER: moon-insurance-cluster
  GKE_ZONE: us-central1-c
  REGION: us-central1

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        service: [ agent-service, integration-service, notification-service, aggregator-service, redshift-analytics-service ]
        include:
          - service: agent-service
            image_name: agent-service
            path: agent-service

          - service: integration-service
            image_name: integration-service
            path: integration-service

          - service: notification-service
            image_name: notification-service
            path: notification-service

          - service: aggregator-service
            image_name: aggregator-service
            path: aggregator-service

          - service: redshift-analytics-service
            image_name: redshift-analytics-service
            path: redshift-analytics-service

    steps:
      - name: ‚úÖ Checkout code
        uses: actions/checkout@v3

      - name: ‚úÖ Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: ‚úÖ Configure Docker
        run: gcloud --quiet auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: ‚úÖ Get GKE Credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      - name: ‚úÖ Create Kubernetes Secrets
        run: |
          kubectl create secret generic mooninsurance-secrets \
            --from-literal=mongo-uri="${{ secrets.MONGO_URI }}" \
            --from-literal=redshift-host="${{ secrets.REDSHIFT_HOST }}" \
            --from-literal=redshift-user="${{ secrets.REDSHIFT_USER }}" \
            --from-literal=redshift-password="${{ secrets.REDSHIFT_PASSWORD }}" \
            --from-literal=redshift-port="${{ secrets.REDSHIFT_PORT }}" \
            --from-literal=redshift-dbname="${{ secrets.REDSHIFT_DBNAME }}" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: üõ†Ô∏è Build and Push Docker Image - ${{ matrix.service }}
        run: |
          echo "Building and pushing image: ${{ matrix.image_name }}"
          docker build -t ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/mooninsurance-repo/${{ matrix.image_name }}:latest -f ./${{ matrix.path }}/docker/Dockerfile ./${{ matrix.path }}
          docker push ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/mooninsurance-repo/${{ matrix.image_name }}:latest

      - name: üîç Verify Docker Images in Artifact Registry
        run: |
          echo "Verifying image exists for: ${{ matrix.image_name }}"
          gcloud artifacts docker images list ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/mooninsurance-repo --filter="name:${{ matrix.image_name }}"

      - name: üöÄ Deploy to GKE - ${{ matrix.service }}
        run: |
          kubectl apply -f ./${{ matrix.path }}/manifests/

  post-deploy:
    needs: build-and-deploy
    runs-on: ubuntu-latest

    steps:
      - name: ‚úÖ Checkout code
        uses: actions/checkout@v3

      - name: ‚úÖ Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: ‚úÖ Get GKE Credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: moon-insurance-cluster
          location: us-central1-c

      - name: üïí Wait for Services to be Ready
        run: |
          for deploy in agent-service integration-service notification-service aggregator-service redshift-analytics-service; do
            echo "Waiting for deployment/$deploy to be ready..."
            kubectl rollout status deployment/$deploy
          done

      - name: üêõ Auto Debug Logs (If Rollout Fails)
        if: failure()
        run: |
          echo "‚ö†Ô∏è Rollout failed. Fetching debug logs..."
          kubectl get all -A
          for deploy in agent-service integration-service notification-service aggregator-service redshift-analytics-service; do
            echo "Describing deployment: $deploy"
            kubectl describe deployment/$deploy || true
            echo "Fetching pods for deployment: $deploy"
            PODS=$(kubectl get pods -l app=$deploy -o jsonpath="{.items[*].metadata.name}")
            for pod in $PODS; do
              echo "Logs for pod: $pod"
              kubectl logs $pod --all-containers=true || true
            done
          done

      - name: üìÆ Run Postman Collection Tests
        run: |
          npm install -g newman
          INGRESS_IP=$(kubectl get ingress mooninsurance-ingress -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "Running Postman tests against IP: $INGRESS_IP"
          newman run ./postman_collection.json --env-var "baseUrl=http://$INGRESS_IP"

      - name: üß© Redshift SQL Validation
        run: |
          pip install psycopg2-binary
          python3 <<EOF
          import psycopg2
          import os

          conn = psycopg2.connect(
              host=os.getenv("REDSHIFT_HOST"),
              port=os.getenv("REDSHIFT_PORT"),
              user=os.getenv("REDSHIFT_USER"),
              password=os.getenv("REDSHIFT_PASSWORD"),
              dbname=os.getenv("REDSHIFT_DBNAME")
          )

          cur = conn.cursor()
          cur.execute("SELECT COUNT(*) FROM sales_data;")
          count = cur.fetchone()[0]
          print(f"‚úÖ Redshift Sales Data Count: {count}")

          cur.close()
          conn.close()
          EOF
        env:
          REDSHIFT_HOST: ${{ secrets.REDSHIFT_HOST }}
          REDSHIFT_PORT: ${{ secrets.REDSHIFT_PORT }}
          REDSHIFT_USER: ${{ secrets.REDSHIFT_USER }}
          REDSHIFT_PASSWORD: ${{ secrets.REDSHIFT_PASSWORD }}
          REDSHIFT_DBNAME: ${{ secrets.REDSHIFT_DBNAME }}

      - name: üìä Final Summary of Endpoints
        run: |
          echo "üåê Fetching Ingress External IP..."
          for i in {1..30}; do
            INGRESS_IP=$(kubectl get ingress mooninsurance-ingress -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [[ -n "$INGRESS_IP" ]]; then
              echo "Ingress IP found: $INGRESS_IP"
              echo "üöÄ Access your services:"
              echo "http://$INGRESS_IP/agent-service/agents"
              echo "http://$INGRESS_IP/integration-service/sync"
              echo "http://$INGRESS_IP/notification-service/notify"
              echo "http://$INGRESS_IP/aggregator-service/aggregate"
              echo "http://$INGRESS_IP/redshift-analytics-service/analyze"
              break
            fi
            sleep 10
          done

      - name: üìõ Add CI/CD Status Badge
        run: |
          echo "![CI/CD Status](https://github.com/${{ github.repository }}/actions/workflows/ci-cd.yaml/badge.svg)" > badge.md

          